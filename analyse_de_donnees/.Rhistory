load("~/Ancien ordi/Bureau/MIAGE/M1/S1/STATISTIQUES BIG DATA/TP1/.RData")
donnees = read.csv2(file.choose(),header=T,sep=",")
attach(donnees)
table (puissance)
table(longueur)
table(nbPlaces)
table(nbPortes)
install.packages("rvest")
install.packages("ggplot2")
install.packages("dplyr")
install.packages("scales")
install.packages("maps")
install.packages("mapproj")
install.packages("plotly")
library(rvest)
library(ggplot2)
library(dplyr)
library(scales)
library(maps)
library(mapproj)
library(plotly)
install.packages("ggplot2")
library(rvest)
library(ggplot2)
library(dplyr)
library(scales)
library(maps)
library(mapproj)
library(plotly)
# The read_html() function load the web page html content in an object named le
le = read_html("https://en.wikipedia.org/w/index.php?title=List_of_U.S._states_and_territories_by_life_expectancy&oldid=928537169")
# Filter html content inobject le to keep only the life expectancy table
le = le %>% html_nodes("table") %>% .[[2]] %>% html_table(fill=T)
View(le)
# Column selection
le = le[c(1,2,6,7)]
View(le)
str(le)
# Renaming columns ('le' : life expectancy)
names(le)[c(3,4)] = c("le_caucasian", "le_african")
View(le)
str(le)
attach(le)
# Converting to numerical format (encodes missing values with NAs)
le_caucasian <- as.numeric(le_caucasian)
# Converting to numerical format (encodes missing values with NAs)
le$le_caucasian <- as.numeric(le$le_caucasian)
le$le_african <- as.numeric(le$le_african)
View(le)
# Calculating Differences Between Caucasian-American and African-American Life Expectancy
le$le_diff = le$le_caucasian - le$le_african
View(le)
# Loading USA states data
states = map_data("state")
# Creating a new variable 'region' with state names
le$region = tolower(le$State)
# Creating a new variable 'region' with state names
le$region = tolower(state)
# Creating a new variable 'region' with state names
le$region = tolower(states)
# Creating a new variable 'region' with state names
le$region = tolower(State)
str(le)
# Creating a new variable 'region' with state names
le$region = tolower(le$State/federal district/territory)
View(le)
View(le)
library(tidyverse)
# Creating a new variable 'region' with state names
colnames(le)
names(le)[names(le) == "State/federal district/territory"] <- "State"
View(le)
le$region = tolower(le$State)
View(le)
# Merging our data with the USA 'states' data from 'maps' package
states = merge(states, le, by="region", all.x=T)
# For correctly displaying accentuated characters in maps
options(encoding="latin1")
# Life expectancy of African-Americans
ggplot(states, aes(x = long, y = lat, group = group, fill = le_african)) + geom_polygon(color = "white") + scale_fill_gradient(name = "Years", low = "#ffe8ee", high = "#c81f49", guide = "colorbar", na.value="#eeeeee") + labs(title="Esp�rance de vie du groupe ethnique Afro-Am�ricain") + coord_map()
# Life expectancy of Caucasian-American
ggplot(states, aes(x = long, y = lat, group = group, fill = le_caucasian)) + geom_polygon(color = "white") + scale_fill_gradient(name = "Years", low = "#ffe8ee", high = "#c81f49", guide = "colorbar", na.value="Gray") + labs(title="Esp�rance de vie du groupe ethnique Caucasien-Am�ricain") + coord_map()
# Dipslay differencies between life expectancies
ggplot(states, aes(x = long, y = lat, group = group, fill = le_diff)) + geom_polygon(color = "white") + scale_fill_gradient(name = "Years", low = "#ffe8ee", high = "#c81f49", guide = "colorbar", na.value="#eeeeee") + labs(title="Diff�rences dans l'esp�rance de vie des groupes ethniques \nCaucasien et Afro-Am�ricain par �tat aux USA") + coord_map()
# Display interactive USA map with contextual message for each state : caucasian-american
map_plot_caucasian = ggplot(states, aes(x = long, y = lat, group = group, fill = le_caucasian)) + geom_polygon(color = "white") + scale_fill_gradient(name = "Years", low = "#ffe8ee", high = "#c81f49", guide = "colorbar", na.value="#eeeeee") + labs(title="Esp�rance de vie du groupe ethnique Caucasien-Am�ricain") + coord_map()
ggplotly(map_plot_caucasian)
# Display interactive USA map with contextual message for each state : afro-american
map_plot_african = ggplot(states, aes(x = long, y = lat, group = group, fill = le_african)) + geom_polygon(color = "white") + scale_fill_gradient(name = "Years", low = "#ffe8ee", high = "#c81f49", guide = "colorbar", na.value="#eeeeee") + labs(title="Esp�rance de vie du groupe ethnique Afro-Am�ricain") + coord_map()
ggplotly(map_plot_african)
View(donnees)
# For correctly displaying accentuated characters in maps
options(encoding="latin1")
# Life expectancy of African-Americans
ggplot(states, aes(x = long, y = lat, group = group, fill = le_african)) + geom_polygon(color = "white") + scale_fill_gradient(name = "Years", low = "#ffe8ee", high = "#c81f49", guide = "colorbar", na.value="#eeeeee") + labs(title="Esperance de vie du groupe ethnique Afro-Americain") + coord_map()
# Life expectancy of Caucasian-American
ggplot(states, aes(x = long, y = lat, group = group, fill = le_caucasian)) + geom_polygon(color = "white") + scale_fill_gradient(name = "Years", low = "#ffe8ee", high = "#c81f49", guide = "colorbar", na.value="Gray") + labs(title="Esperance de vie du groupe ethnique Caucasien-Americain") + coord_map()
# Dipslay differencies between life expectancies
ggplot(states, aes(x = long, y = lat, group = group, fill = le_diff)) + geom_polygon(color = "white") + scale_fill_gradient(name = "Years", low = "#ffe8ee", high = "#c81f49", guide = "colorbar", na.value="#eeeeee") + labs(title="Differences dans l'esperance de vie des groupes ethniques \nCaucasien et Afro-Americain par etat aux USA") + coord_map()
# Display interactive USA map with contextual message for each state : caucasian-american
map_plot_caucasian = ggplot(states, aes(x = long, y = lat, group = group, fill = le_caucasian)) + geom_polygon(color = "white") + scale_fill_gradient(name = "Years", low = "#ffe8ee", high = "#c81f49", guide = "colorbar", na.value="#eeeeee") + labs(title="Esperance de vie du groupe ethnique Caucasien-Americain") + coord_map()
ggplotly(map_plot_caucasian)
# Display interactive USA map with contextual message for each state : afro-american
map_plot_african = ggplot(states, aes(x = long, y = lat, group = group, fill = le_african)) + geom_polygon(color = "white") + scale_fill_gradient(name = "Years", low = "#ffe8ee", high = "#c81f49", guide = "colorbar", na.value="#eeeeee") + labs(title="Esperance de vie du groupe ethnique Afro-Americain") + coord_map()
ggplotly(map_plot_african)
install.packages("rvest")
install.packages("ggplot2")
install.packages("dplyr")
install.packages("scales")
install.packages("maps")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
library(rvest)
library(ggplot2)
library(dplyr)
library(scales)
library(maps)
library(mapproj)
library(plotly)
library(tidyverse)
# Install packages (will update them if already installed)
install.packages("rvest")
install.packages("rvest")
install.packages("ggplot2")
# Install packages (will update them if already installed)
install.packages("rvest")
# Column selection
le = le[c(1,2,6,7)]
View(le)
# Renaming columns ('le' : life expectancy)
names(le)[c(3,4)] = c("le_caucasian", "le_african")
View(le)
str(le)
# Converting to numerical format (encodes missing values with NAs)
le$le_caucasian <- as.numeric(le$le_caucasian)
le$le_african <- as.numeric(le$le_african)
View(le)
# Calculating Differences Between Caucasian-American and African-American Life Expectancy
le$le_diff = le$le_caucasian - le$le_african
View(le)
# Loading USA states data
states = map_data("state")
# Creating a new variable 'region' with state names
colnames(le)
names(le)[names(le) == "State/federal district/territory"] <- "State"
View(le)
le$region = tolower(le$State)
View(le)
# Merging our data with the USA 'states' data from 'maps' package
states = merge(states, le, by="region", all.x=T)
#---------------------------------------#
# DISPLAYING DATA ON THE MAP OF THE USA #
#---------------------------------------#
# For correctly displaying accentuated characters in maps
options(encoding="latin1")
# Life expectancy of African-Americans
ggplot(states, aes(x = long, y = lat, group = group, fill = le_african)) + geom_polygon(color = "white") + scale_fill_gradient(name = "Years", low = "#ffe8ee", high = "#c81f49", guide = "colorbar", na.value="#eeeeee") + labs(title="Esperance de vie du groupe ethnique Afro-Americain") + coord_map()
# Life expectancy of Caucasian-American
ggplot(states, aes(x = long, y = lat, group = group, fill = le_caucasian)) + geom_polygon(color = "white") + scale_fill_gradient(name = "Years", low = "#ffe8ee", high = "#c81f49", guide = "colorbar", na.value="Gray") + labs(title="Esperance de vie du groupe ethnique Caucasien-Americain") + coord_map()
# Dipslay differencies between life expectancies
ggplot(states, aes(x = long, y = lat, group = group, fill = le_diff)) + geom_polygon(color = "white") + scale_fill_gradient(name = "Years", low = "#ffe8ee", high = "#c81f49", guide = "colorbar", na.value="#eeeeee") + labs(title="Differences dans l'esperance de vie des groupes ethniques \nCaucasien et Afro-Americain par etat aux USA") + coord_map()
# Display interactive USA map with contextual message for each state : caucasian-american
map_plot_caucasian = ggplot(states, aes(x = long, y = lat, group = group, fill = le_caucasian)) + geom_polygon(color = "white") + scale_fill_gradient(name = "Years", low = "#ffe8ee", high = "#c81f49", guide = "colorbar", na.value="#eeeeee") + labs(title="Esperance de vie du groupe ethnique Caucasien-Americain") + coord_map()
ggplotly(map_plot_caucasian)
# Display interactive USA map with contextual message for each state : afro-american
map_plot_african = ggplot(states, aes(x = long, y = lat, group = group, fill = le_african)) + geom_polygon(color = "white") + scale_fill_gradient(name = "Years", low = "#ffe8ee", high = "#c81f49", guide = "colorbar", na.value="#eeeeee") + labs(title="Esperance de vie du groupe ethnique Afro-Americain") + coord_map()
ggplotly(map_plot_african)
#Nettoyage de la variable "Sexe"
table(clients$sexe)
library("rstudioapi")
library(questionr)
library(dplyr)
library("tidyr")
setwd(dirname(getActiveDocumentContext()$path))
getwd()
##Nettoyage des fichiers de donnees
#Chargement des donnees
client1 = read.csv("Clients_1.csv", header=T, sep=",", dec='.')
client9 = read.csv("Clients_9.csv", header=T, sep=",", dec='.')
#Merge les 2 fichiers
clients = rbind(client1, client9)
str(clients)
#Nettoyage de la variable "Age"
table(clients$age)
clients$age = as.numeric(clients$age)
summary(clients)
clients$age[clients$age == -1] = NA
#609NAs
which(is.na(clients$age))
clients = clients %>% drop_na()
#Nettoyage de la variable "Sexe"
table(clients$sexe)
summary(clients$sexe)
clients$sexe[clients$sexe == "?" | clients$sexe == ""] = NA
#Nettoyage de la variable "Sexe"
table(clients$sexe)
clients$sexe[clients$sexe == "?" | clients$sexe == " "] = NA
#Nettoyage de la variable "Sexe"
table(clients$sexe)
clients$sexe[clients$sexe == "?" | clients$sexe == " " | clients$sexe == "N/D"] = NA
#Nettoyage de la variable "Sexe"
table(clients$sexe)
which(is.na(clients$age))
which(is.na(clients$sexe))
sum(is.na(clients$sexe))
clients = clients %>% drop_na()
summary(clients)
#Nettoyage de la variable "Sexe"
table(clients$sexe)
clients$sexe[clients$sexe == "FÃ©minin" | clients$sexe == "Femme"] = "F"
#Nettoyage de la variable "Sexe"
table(clients$sexe)
clients$sexe[clients$sexe == "Masculin"] = "M"
#Nettoyage de la variable "Sexe"
table(clients$sexe)
clients$sexe[clients$sexe == "Masculin" | "Homme"] = "M"
library("rstudioapi")
library(questionr)
library(dplyr)
library("tidyr")
setwd(dirname(getActiveDocumentContext()$path))
getwd()
##Nettoyage des fichiers de donnees
#Chargement des donnees
client1 = read.csv("Clients_1.csv", header=T, sep=",", dec='.')
client9 = read.csv("Clients_9.csv", header=T, sep=",", dec='.')
#Merge les 2 fichiers
clients = rbind(client1, client9)
str(clients)
#Nettoyage de la variable "Age"
table(clients$age)
clients$age = as.numeric(clients$age)
summary(clients)
clients$age[clients$age == -1] = NA
#609NAs
which(is.na(clients$age))
clients = clients %>% drop_na()
#Nettoyage de la variable "Sexe"
table(clients$sexe)
summary(clients$sexe)
clients$sexe[clients$sexe == "?" | clients$sexe == " " | clients$sexe == "N/D"] = NA
which(is.na(clients$sexe))
sum(is.na(clients$sexe))
clients = clients %>% drop_na()
clients$sexe[clients$sexe == "FÃ©minin" | clients$sexe == "Femme"] = "F"
clients$sexe[clients$sexe == "Masculin" | "Homme"] = "M"
library("rstudioapi")
library(questionr)
library(dplyr)
library("tidyr")
setwd(dirname(getActiveDocumentContext()$path))
getwd()
##Nettoyage des fichiers de donnees
#Chargement des donnees
client1 = read.csv("Clients_1.csv", header=T, sep=",", dec='.')
client9 = read.csv("Clients_9.csv", header=T, sep=",", dec='.')
#Merge les 2 fichiers
clients = rbind(client1, client9)
str(clients)
#Nettoyage de la variable "Age"
table(clients$age)
clients$age = as.numeric(clients$age)
summary(clients)
clients$age[clients$age == -1] = NA
#609NAs
which(is.na(clients$age))
clients = clients %>% drop_na()
#Nettoyage de la variable "Sexe"
table(clients$sexe)
summary(clients$sexe)
clients$sexe[clients$sexe == "?" | clients$sexe == " " | clients$sexe == "N/D"] = NA
which(is.na(clients$sexe))
sum(is.na(clients$sexe))
clients = clients %>% drop_na()
clients$sexe[clients$sexe == "FÃ©minin" | clients$sexe == "Femme"] = "F"
clients$sexe[clients$sexe == "Masculin" | clients$sexe == "Homme"] = "M"
#Nettoyage de la variable "Sexe"
table(clients$sexe)
which(is.na(clients$sexe))
library("rstudioapi")
library(questionr)
library(dplyr)
library("tidyr")
setwd(dirname(getActiveDocumentContext()$path))
getwd()
##Nettoyage des fichiers de donnees
#Chargement des donnees
client1 = read.csv("Clients_1.csv", header=T, sep=",", dec='.')
client9 = read.csv("Clients_9.csv", header=T, sep=",", dec='.')
#Merge les 2 fichiers
clients = rbind(client1, client9)
str(clients)
#Nettoyage de la variable "Age"
table(clients$age)
clients$age = as.numeric(clients$age)
summary(clients)
clients$age[clients$age == -1] = NA
#609NAs
which(is.na(clients$age))
clients = clients %>% drop_na()
#Nettoyage de la variable "Sexe"
table(clients$sexe)
summary(clients$sexe)
clients$sexe[clients$sexe == "?" | clients$sexe == " " | clients$sexe == "N/D"] = NA
which(is.na(clients$sexe))
sum(is.na(clients$sexe))
clients = clients %>% drop_na()
clients$sexe[clients$sexe == "FÃ©minin" | clients$sexe == "Femme"] = "F"
clients$sexe[clients$sexe == "Masculin" | clients$sexe == "Homme"] = "M"
#Nettoyage de la variable "Situation"
#Nettoyage de la variable "Situation"
table(clients$situationFamiliale)
clients$situationFamiliale[clients$situationFamiliale == "?" | clients$situationFamiliale == " " | clients$situationFamiliale == "N/D"] = NA
sum(is.na(clients$situationFamiliale))
clients = clients %>% drop_na()
is.na(clients)
sum(is.na(clients))
#Nettoyage de la variable "Situation"
table(clients$situationFamiliale)
clients$situationFamiliale[clients$situationFamiliale == "CÃ©libataire" | clients$situationFamiliale == "Seul" | clients$situationFamiliale == "Seule"] = "Single"
#Nettoyage de la variable "Situation"
table(clients$situationFamiliale)
levels(clients$situationFamiliale) = c("Divorced","Couple","Maried","Single")
#Nettoyage de la variable "Situation"
table(clients$situationFamiliale)
clients$situationFamiliale = as.factor(clients$situationFamiliale)
str(clients)
levels(clients$situationFamiliale) = c("Divorced","Couple","Maried","Single")
#Nettoyage de la variable "Situation"
table(clients$situationFamiliale)
#Nettoyage sur la variable "NbEnfantsAcharge"
table(clients$nbEnfantsAcharge)
clients$nbEnfantsAcharge[clients$nbEnfantsAcharge == "?" | clients$sexe == " " | clients$sexe == "-1"] = NA
sum(is.na(clients$nbEnfantsAcharge))
clients = clients %>% drop_na()
summary(clients$nbEnfantsAcharge)
sum(is.na(clients))
##Lier la colonne des categories sur le fichier client
#Lier la colonne category au fichier client par l'immatriculation
data <- clients %>%
left_join(immat, by = "immatriculation") %>%
select(c(-puissance, -longueur, -nbPlaces, -nbPortes, -couleur, -occasion, -prix))
library("rstudioapi")
setwd(dirname(getActiveDocumentContext()$path))
getwd()
##Previsions pour prevoir les categories sur les immatriculations
#Chargement des donnees
immat = read.csv("Immatriculations.csv", header=T, sep=",", dec='.', stringsAsFactors = T)
#Application des classifieurs et de la prediction sur le fichier immat
predictionImmat = predict(model, immat, type="class")
table(predictionImmat)
print(predictionImmat)
#Ajout de la colonne dans le fichier immat
immat$prediction = predictionImmat
View(immat)
#Ajout du nom des categories
immat$categoryName <- ifelse(immat$prediction == 1, 'longue5po5pl',
ifelse(immat$prediction == 2, 'tresLongue5pl5po',
ifelse(immat$prediction == 3, 'moyenne5pl5po',
ifelse(immat$prediction == 4, 'courte5pl5po',
ifelse(immat$prediction== 5,'courte5pl3po','longue7pl5po')))))
View(immat)
library("rstudioapi")
library("C50")
library("tree")
library("rpart")
setwd(dirname(getActiveDocumentContext()$path))
getwd()
##Test de prediction
#Chargement des donnees
category = read.csv("cluster.csv", header=T, sep=",", dec='.', stringsAsFactors = T)
category$cluster = as.factor(category$cluster)
table(category$cluster)
#2/3 pour train and 1/3 pour test
sizeCategory = nrow(category)
sizeTrain = round(sizeCategory * (2/3), digits = 0)
categoryTrain = category[1:sizeTrain,]
categoryVal = category[(sizeTrain+1):sizeCategory,]
table(categoryTrain$cluster)
#Constitution des classifieurs
#Utilisation de C50
#On explique cluster en fonction des variables explicatives (puissance, longueur, nbPlaces, nbPortes)
model = C5.0(cluster~puissance+longueur+nbPlaces+nbPortes, categoryTrain)
#Modeliser l'arbre
plot(model, type="simple")
#L'arbre n'a aucun sens
#Prediction
predictModel = predict(model, categoryVal, type="class")
print(predictModel)
table(predictModel)
#Ajout de la variable dans le dataframe
categoryVal$prediction = predictModel
#Afficher le taleau pour le dataframe categoryVal[toutes les lignes, colonnes choisies]
View(categoryVal[,c("cluster", "prediction")])
#Calcul du taux de succes
success = nrow(categoryVal[categoryVal$cluster == categoryVal$prediction,]) / nrow(categoryVal)*100
#Le taux de succes est a 50% mais la prediction reste bonne.
library("rstudioapi")
setwd(dirname(getActiveDocumentContext()$path))
getwd()
##Previsions pour prevoir les categories sur les immatriculations
#Chargement des donnees
immat = read.csv("Immatriculations.csv", header=T, sep=",", dec='.', stringsAsFactors = T)
#Application des classifieurs et de la prediction sur le fichier immat
predictionImmat = predict(model, immat, type="class")
table(predictionImmat)
print(predictionImmat)
#Ajout de la colonne dans le fichier immat
immat$prediction = predictionImmat
View(immat)
#Ajout du nom des categories
immat$categoryName <- ifelse(immat$prediction == 1, 'longue5po5pl',
ifelse(immat$prediction == 2, 'tresLongue5pl5po',
ifelse(immat$prediction == 3, 'moyenne5pl5po',
ifelse(immat$prediction == 4, 'courte5pl5po',
ifelse(immat$prediction== 5,'courte5pl3po','longue7pl5po')))))
View(immat)
##Lier la colonne des categories sur le fichier client
#Lier la colonne category au fichier client par l'immatriculation
data <- clients %>%
left_join(immat, by = "immatriculation") %>%
select(c(-puissance, -longueur, -nbPlaces, -nbPortes, -couleur, -occasion, -prix))
save.image("~/Ancien ordi/Bureau/MIAGE/M2/PROJET/.RData")
